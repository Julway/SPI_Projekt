/**
  ******************************************************************************
  * @file    IO_Toggle/main.c 
  * @author  MCD Application Team
  * @version V1.0.0
  * @date    19-September-2011
  * @brief   Main program body
  ******************************************************************************
  * @attention
  *
  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  *
  * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  ******************************************************************************  
  */ 

/* Includes ------------------------------------------------------------------*/
#include "stm32f4_discovery.h"
#include <misc.h>			 // I recommend you have a look at these in the ST firmware folder
#include <stm32f4xx_usart.h> // under Libraries/STM32F4xx_StdPeriph_Driver/inc and src
#include <cstdio>
//#include "usart.h"


/** @addtogroup STM32F4_Discovery_Peripheral_Examples
  * @{
  */

/** @addtogroup IO_Toggle
  * @{
  */ 

/* Private typedef -----------------------------------------------------------*/
GPIO_InitTypeDef  GPIO_InitStructure;
EXTI_InitTypeDef   EXTI_InitStructure;
USART_InitTypeDef USART_InitStruct;


extern NVIC_InitTypeDef   NVIC_InitStructure;


/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
char data = 'A';
/* Private function prototypes -----------------------------------------------*/
void Delay(__IO uint32_t nCount);
void LEDEnable(void);
void PA0_als_EXTI0(void);
void USARTConf(void);
void EXTI0_IRQHandler(void);
void USART4_IRQHandler(void);


/* Private functions ---------------------------------------------------------*/

/**
  * @brief  Main program
  * @param  None
  * @retval None
  */
	//***************************************************************************************************************************************************************

		//**************************************************************************************************************************************************************
	void USARTConf()
	{
		/* USART2 init */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	//RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
		
	/* GPIO UART Init */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6; // Pin 6 (Rx)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF; 			
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;			
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOD, &GPIO_InitStructure);	
		
// GPIO UART INIT
			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2; // Pin 2 (Tx) are used
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF; 			
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;			
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(GPIOA, &GPIO_InitStructure);	
		
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_USART2);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);

	/* Now the USART_InitStruct is used to define the 
	 * properties of USART1 
	 */
	 	USART_OverSampling8Cmd(USART2, ENABLE);

	 
	USART_InitStruct.USART_BaudRate = 9600;				// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;		// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;		// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx; // we want to enable the transmitter and the receiver
	USART_Init(USART2, &USART_InitStruct);	

	USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);

	USART_Cmd(USART2, ENABLE);

	}
	
	
		//***************************************************************************************************************************************************************
	
	
	
	//*************************************** S T A R T    O F    M A I N **********************************************************
int main(void)
{
	
	NVIC_PriorityGroupConfig (NVIC_PriorityGroup_2);

	
	
	//LEDEnable();
  USARTConf();
	//PA0_als_EXTI0();
	
	
  while (1)	
  {
		char *temp1 = "40 Grad\t";
		char *temp2 = "42 Grad\t";
		char *tolerance = "2 Grad\n\r";
		
		    Delay(0xFFFFFF);


		while (*temp1)
		{
			while( !(USART2->SR & 0x00000040));
			USART_SendData(USART2, *temp1);
			temp1++;
		}
		while(*temp2)
		{
			while (!(USART2->SR & 0x00000040));
			USART_SendData(USART2, *temp2);
			temp2++;
		}		
				while(*tolerance)
		{
			while (!(USART2->SR & 0x00000040));
			USART_SendData(USART2, *tolerance);
			tolerance++;
		}		
  }
  
}

//******************************************************************************************
void Delay(__IO uint32_t nCount)
{
  while(nCount--)
  {
	}
}



void assert_failed(uint8_t* file, uint32_t line)
{ 
 
  while (1)
  {
  }
}

